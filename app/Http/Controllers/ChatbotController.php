<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Services\GeminiService;
use Illuminate\Support\Facades\Log;
use App\Models\Product;
use App\Models\Brand;
use App\Models\Category;

class ChatbotController extends Controller
{
    protected $geminiService;

    public function __construct(GeminiService $geminiService)
    {
        $this->geminiService = $geminiService;
    }

    public function index()
    {
        return view('client.chatbot');
    }

    public function chat(Request $request)
    {
        try {
            $message = $request->input('message');
            Log::info('Received message:', ['message' => $message]);

            if (empty($message)) {
                return response()->json([
                    'status' => 'error',
                    'message' => 'Vui l√≤ng nh·∫≠p tin nh·∫Øn.'
                ]);
            }

            $isProductQuery = $this->isProductQuery($message);
            Log::info('Is product query:', ['result' => $isProductQuery]);

            if ($isProductQuery) {
                $products = $this->getProductsFromAIAnalysis($message);

                if ($products->isEmpty()) {
                    return response()->json([
                        'status' => 'success',
                        'message' => 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p.'
                    ]);
                }

                $productData = $this->formatProductData($products);

                return response()->json([
                    'status' => 'success',
                    'message' => $productData,
                    'is_html' => true
                ]);
            }

            $response = $this->handleGeneralQuestions($message);
            return response()->json([
                'status' => 'success',
                'message' => $response
            ]);

        } catch (\Exception $e) {
            Log::error('Error in chat:', [
                'message' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);

            return response()->json([
                'status' => 'error',
                'message' => 'C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i sau.'
            ]);
        }
    }

    private function isProductQuery($message)
    {
        $message = mb_strtolower($message, 'UTF-8');
        $productKeywords = [
            'ƒë·ªìng h·ªì', 'watch', 'watches', 'casio', 'seiko', 'citizen', 'tissot', 'fossil',
            'nam', 'n·ªØ', 'men', 'women', 'male', 'female',
            'gi√°', 'price', 'cost', 'd∆∞·ªõi', 'tr√™n', 'kho·∫£ng', 't·∫ßm',
            'th·ªÉ thao', 'sport', 'd·∫° h·ªôi', 'formal', 'c√¥ng s·ªü', 'elegant',
            'mua', 'b√°n', 't∆∞ v·∫•n', 'gi·ªõi thi·ªáu', 't√¨m', 'ki·∫øm', 'c·∫ßn', 'mu·ªën',
            'buy', 'sell', 'recommend', 'suggest', 'find', 'search', 'need', 'want',
            'm·∫´u', 'model', 'ki·ªÉu', 'style', 'lo·∫°i', 'type', 'd√≤ng', 'line',
            'm·ªõi', 'new', 'hot', 'bestseller', 'ph·ªï bi·∫øn', 'popular', 'trending'
        ];

        $count = 0;
        foreach ($productKeywords as $keyword) {
            if (str_contains($message, $keyword)) {
                $count++;
            }
        }

        return $count >= 2; // N·∫øu c√≥ √≠t nh·∫•t 2 t·ª´ kh√≥a s·∫£n ph·∫©m
    }

    private function getProductsFromAIAnalysis($message)
    {
        $message = mb_strtolower($message, 'UTF-8');
        $query = Product::query()
            ->with(['brand', 'category', 'variants'])
            ->where('status', 'active')
            ->whereHas('variants', function ($q) {
                $q->where('stock', '>', 0);
            });

        // Ph√¢n t√≠ch th∆∞∆°ng hi·ªáu
        $this->filterByBrand($message, $query);

        // Ph√¢n t√≠ch danh m·ª•c
        $this->filterByCategory($message, $query);

        // Ph√¢n t√≠ch gi√°
        $this->filterByPrice($message, $query);

        // S·∫Øp x·∫øp v√† l·∫•y s·∫£n ph·∫©m
        return $query->orderByRaw('(
            select price from product_variants
            where product_variants.product_id = products.id
            order by price asc
            limit 1
        ) asc')->get();
    }

    private function filterByBrand($message, &$query)
    {
        $brands = Brand::all();
        foreach ($brands as $brand) {
            $brandName = mb_strtolower($brand->name, 'UTF-8');
            if (str_contains($message, $brandName)) {
                $query->where('brand_id', $brand->id);
                break;
            }
        }
    }

    private function filterByCategory($message, &$query)
    {
        $categoryFilters = [
            'th·ªÉ thao' => ['th·ªÉ thao', 'sport'],
            'cao c·∫•p' => ['cao c·∫•p', 'luxury'],
            'th·ªùi trang' => ['th·ªùi trang', 'fashion'],
        ];

        foreach ($categoryFilters as $type => $keywords) {
            foreach ($keywords as $keyword) {
                if (str_contains($message, $keyword)) {
                    $query->whereHas('category', function ($q) use ($type) {
                        $q->where('name', 'like', "%$type%");
                    });
                    break 2;
                }
            }
        }
    }

    private function filterByPrice($message, &$query)
    {
        if (preg_match('/(\d+)\s*(tri·ªáu|tr)/i', $message, $matches)) {
            $price = $matches[1] * 1000000;
            $minPrice = $price * 0.8;
            $maxPrice = $price * 1.2;

            $query->whereHas('variants', function ($q) use ($minPrice, $maxPrice) {
                $q->whereBetween('price', [$minPrice, $maxPrice]);
            });
        }
    }

    private function formatProductData($products)
    {
        if ($products->isEmpty()) {
            return "Xin l·ªói, hi·ªán t·∫°i ch√∫ng t√¥i kh√¥ng c√≥ s·∫£n ph·∫©m ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa b·∫°n.";
        }

        $formattedData = "T√¥i t√¨m th·∫•y m·ªôt s·ªë s·∫£n ph·∫©m:\n\n";
        foreach ($products as $index => $product) {
            $formattedData .= "S·∫£n ph·∫©m " . ($index + 1) . ":\n";
            $formattedData .= "T√™n: {$product->name}\n";
            $formattedData .= "Th∆∞∆°ng hi·ªáu: " . ($product->brand ? $product->brand->name : 'Kh√¥ng x√°c ƒë·ªãnh') . "\n";
            $formattedData .= "Danh m·ª•c: " . ($product->category ? $product->category->name : 'Kh√¥ng x√°c ƒë·ªãnh') . "\n";

            if ($product->variants->isNotEmpty()) {
                $formattedData .= "Gi√°: " . number_format($product->variants->first()->price, 0, ',', '.') . " VNƒê\n";
                $formattedData .= "T√¨nh tr·∫°ng: " . ($product->variants->first()->stock > 0 ? 'C√≤n h√†ng' : 'H·∫øt h√†ng') . "\n";
            }

            $productUrl = route('client.shop.show', $product->id);
            $formattedData .= "üîó <a href='{$productUrl}'>Xem chi ti·∫øt s·∫£n ph·∫©m</a>\n";
            $formattedData .= "\n========================================\n\n";
        }

        return $formattedData;
    }

    private function handleGeneralQuestions($message)
    {
        $message = mb_strtolower($message, 'UTF-8');

        if (mb_strpos($message, 'ch√†o') !== false) {
            return "Xin ch√†o! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?";
        }

        if (mb_strpos($message, 'ƒë·∫∑t h√†ng') !== false) {
            return "ƒê·ªÉ ƒë·∫∑t h√†ng, b·∫°n c√≥ th·ªÉ:\n1. Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng\n2. ƒêi·ªÅn th√¥ng tin giao h√†ng\n3. Ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n\n4. X√°c nh·∫≠n ƒë∆°n h√†ng";
        }

        if (mb_strpos($message, 'v·∫≠n chuy·ªÉn') !== false) {
            return "Ch√∫ng t√¥i giao h√†ng to√†n qu·ªëc v·ªõi ph√≠ v·∫≠n chuy·ªÉn t·ª´ 100.000 VNƒê. Th·ªùi gian giao h√†ng d·ª± ki·∫øn 2-4 ng√†y l√†m vi·ªác.";
        }

        if (mb_strpos($message, 'thanh to√°n') !== false) {
            return "Ch√∫ng t√¥i ch·∫•p nh·∫≠n c√°c h√¨nh th·ª©c thanh to√°n:\n1. Thanh to√°n khi nh·∫≠n h√†ng (COD)\n2. Chuy·ªÉn kho·∫£n ng√¢n h√†ng\n3. Thanh to√°n qua VNPay";
        }

        return "T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n? B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ s·∫£n ph·∫©m, ƒë·∫∑t h√†ng, v·∫≠n chuy·ªÉn ho·∫∑c thanh to√°n.";
    }
}
